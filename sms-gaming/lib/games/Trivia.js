const { shuffleArray, alphabet } = require('./utils');

// Simple HTML entity decoder
function decodeHTMLEntities(text) {
  const entities = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#039;': "'",
    '&apos;': "'",
    '&ldquo;': '"',
    '&rdquo;': '"',
    '&lsquo;': "'",
    '&rsquo;': "'",
    '&hellip;': '...',
    '&mdash;': '‚Äî',
    '&ndash;': '‚Äì',
    '&nbsp;': ' ',
    '&copy;': '¬©',
    '&reg;': '¬Æ',
    '&trade;': '‚Ñ¢',
    '&euro;': '‚Ç¨',
    '&pound;': '¬£',
    '&yen;': '¬•',
    '&cent;': '¬¢',
    '&sect;': '¬ß',
    '&deg;': '¬∞',
    '&plusmn;': '¬±',
    '&times;': '√ó',
    '&divide;': '√∑',
    '&frac12;': '¬Ω',
    '&frac14;': '¬º',
    '&frac34;': '¬æ',
    '&sup1;': '¬π',
    '&sup2;': '¬≤',
    '&sup3;': '¬≥',
    '&micro;': '¬µ',
    '&para;': '¬∂',
    '&middot;': '¬∑',
    '&bull;': '‚Ä¢',
    '&ndash;': '‚Äì',
    '&mdash;': '‚Äî',
    '&lsquo;': "'",
    '&rsquo;': "'",
    '&sbquo;': "'",
    '&ldquo;': '"',
    '&rdquo;': '"',
    '&bdquo;': '"',
    '&dagger;': '‚Ä†',
    '&Dagger;': '‚Ä°',
    '&permil;': '‚Ä∞',
    '&lsaquo;': '‚Äπ',
    '&rsaquo;': '‚Ä∫',
    '&euro;': '‚Ç¨',
    '&pound;': '¬£',
    '&yen;': '¬•',
    '&cent;': '¬¢',
    '&curren;': '¬§',
    '&fnof;': '∆í',
    '&Alpha;': 'Œë',
    '&Beta;': 'Œí',
    '&Gamma;': 'Œì',
    '&Delta;': 'Œî',
    '&Epsilon;': 'Œï',
    '&Zeta;': 'Œñ',
    '&Eta;': 'Œó',
    '&Theta;': 'Œò',
    '&Iota;': 'Œô',
    '&Kappa;': 'Œö',
    '&Lambda;': 'Œõ',
    '&Mu;': 'Œú',
    '&Nu;': 'Œù',
    '&Xi;': 'Œû',
    '&Omicron;': 'Œü',
    '&Pi;': 'Œ†',
    '&Rho;': 'Œ°',
    '&Sigma;': 'Œ£',
    '&Tau;': 'Œ§',
    '&Upsilon;': 'Œ•',
    '&Phi;': 'Œ¶',
    '&Chi;': 'Œß',
    '&Psi;': 'Œ®',
    '&Omega;': 'Œ©',
    '&alpha;': 'Œ±',
    '&beta;': 'Œ≤',
    '&gamma;': 'Œ≥',
    '&delta;': 'Œ¥',
    '&epsilon;': 'Œµ',
    '&zeta;': 'Œ∂',
    '&eta;': 'Œ∑',
    '&theta;': 'Œ∏',
    '&iota;': 'Œπ',
    '&kappa;': 'Œ∫',
    '&lambda;': 'Œª',
    '&mu;': 'Œº',
    '&nu;': 'ŒΩ',
    '&xi;': 'Œæ',
    '&omicron;': 'Œø',
    '&pi;': 'œÄ',
    '&rho;': 'œÅ',
    '&sigmaf;': 'œÇ',
    '&sigma;': 'œÉ',
    '&tau;': 'œÑ',
    '&upsilon;': 'œÖ',
    '&phi;': 'œÜ',
    '&chi;': 'œá',
    '&psi;': 'œà',
    '&omega;': 'œâ',
    '&thetasym;': 'œë',
    '&upsih;': 'œí',
    '&piv;': 'œñ',
    '&ensp;': '‚ÄÇ',
    '&emsp;': '‚ÄÉ',
    '&thinsp;': '‚Äâ',
    '&zwnj;': '‚Äå',
    '&zwj;': '‚Äç',
    '&lrm;': '‚Äé',
    '&rlm;': '‚Äè',
    '&ndash;': '‚Äì',
    '&mdash;': '‚Äî',
    '&lsquo;': "'",
    '&rsquo;': "'",
    '&sbquo;': "'",
    '&ldquo;': '"',
    '&rdquo;': '"',
    '&bdquo;': '"',
    '&dagger;': '‚Ä†',
    '&Dagger;': '‚Ä°',
    '&bull;': '‚Ä¢',
    '&hellip;': '‚Ä¶',
    '&permil;': '‚Ä∞',
    '&prime;': '‚Ä≤',
    '&Prime;': '‚Ä≥',
    '&lsaquo;': '‚Äπ',
    '&rsaquo;': '‚Ä∫',
    '&oline;': '‚Äæ',
    '&frasl;': '‚ÅÑ',
    '&euro;': '‚Ç¨',
    '&image;': '‚Ñë',
    '&weierp;': '‚Ñò',
    '&real;': '‚Ñú',
    '&trade;': '‚Ñ¢',
    '&alefsym;': '‚Ñµ',
    '&larr;': '‚Üê',
    '&uarr;': '‚Üë',
    '&rarr;': '‚Üí',
    '&darr;': '‚Üì',
    '&harr;': '‚Üî',
    '&crarr;': '‚Üµ',
    '&lArr;': '‚áê',
    '&uArr;': '‚áë',
    '&rArr;': '‚áí',
    '&dArr;': '‚áì',
    '&hArr;': '‚áî',
    '&forall;': '‚àÄ',
    '&part;': '‚àÇ',
    '&exist;': '‚àÉ',
    '&empty;': '‚àÖ',
    '&nabla;': '‚àá',
    '&isin;': '‚àà',
    '&notin;': '‚àâ',
    '&ni;': '‚àã',
    '&prod;': '‚àè',
    '&sum;': '‚àë',
    '&minus;': '‚àí',
    '&lowast;': '‚àó',
    '&radic;': '‚àö',
    '&prop;': '‚àù',
    '&infin;': '‚àû',
    '&ang;': '‚à†',
    '&and;': '‚àß',
    '&or;': '‚à®',
    '&cap;': '‚à©',
    '&cup;': '‚à™',
    '&int;': '‚à´',
    '&there4;': '‚à¥',
    '&sim;': '‚àº',
    '&cong;': '‚âÖ',
    '&asymp;': '‚âà',
    '&ne;': '‚â†',
    '&equiv;': '‚â°',
    '&le;': '‚â§',
    '&ge;': '‚â•',
    '&sub;': '‚äÇ',
    '&sup;': '‚äÉ',
    '&nsub;': '‚äÑ',
    '&sube;': '‚äÜ',
    '&supe;': '‚äá',
    '&oplus;': '‚äï',
    '&otimes;': '‚äó',
    '&perp;': '‚ä•',
    '&sdot;': '‚ãÖ',
    '&lceil;': '‚åà',
    '&rceil;': '‚åâ',
    '&lfloor;': '‚åä',
    '&rfloor;': '‚åã',
    '&lang;': '‚å©',
    '&rang;': '‚å™',
    '&loz;': '‚óä',
    '&spades;': '‚ô†',
    '&clubs;': '‚ô£',
    '&hearts;': '‚ô•',
    '&diams;': '‚ô¶'
  };

  return text.replace(/&[^;]+;/g, entity => entities[entity] || entity);
}

const positiveFeedback = [
  "Excellent!",
  "Great job!",
  "Well done!",
  "Perfect!",
  "Amazing!",
  "Brilliant!",
  "Fantastic!",
  "Outstanding!",
  "Superb!",
  "Terrific!"
];

class Trivia {
  static name = 'Trivia';

  constructor(gameId) {
    this.state = 'play';
    this.gameId = gameId;
    this.quizStarted = false;
    this.currentQuestionIndex = 0;
    this.questions = null;
    this.numOfCorrectAnswers = 0;
  }

  async init() {
    const response = await fetch('https://opentdb.com/api.php?amount=5');
    const data = await response.json();
    this.questions = data.results;

    for (let i = 0; i < this.questions.length; i++) {
      this.questions[i].shuffled_answers = this.getShuffledAnswers(i);
      this.questions[i].question = decodeHTMLEntities(this.questions[i].question);
      this.questions[i].correct_answer = decodeHTMLEntities(this.questions[i].correct_answer);
      this.questions[i].incorrect_answers = this.questions[i].incorrect_answers.map(answer => 
        decodeHTMLEntities(answer)
      );
    }
    console.log(data.results);
  }

  get welcomeMessage() {
    const message =
      'How much do you know about anything, really‚ùì\n' +
      "Let's find out in this 5 questions Trivia.\n" +
      'Type "Go" when you are ready to get started. üî•';

    return message;
  }

  askNextQuestion() {
    const { question, shuffled_answers } = this.questions[
      this.currentQuestionIndex
    ];
    let message = question;

    for (let i = 0; i < alphabet.length; i++) {
      const letter = alphabet[i].toUpperCase();
      const possibleAnswer = shuffled_answers[i];

      if (!possibleAnswer) break;
      message += `\n*${letter}* ${possibleAnswer}`;
    }

    this.currentQuestionIndex++;
    return message;
  }

  getShuffledAnswers(questionIndex) {
    const question = this.questions[questionIndex];
    const answers = [...question.incorrect_answers, question.correct_answer];

    return shuffleArray(answers);
  }

  isAnswerCorrect(code) {
    const { questions, currentQuestionIndex } = this;
    const question = questions[currentQuestionIndex - 1];
    const answerIndex = alphabet.indexOf(code.toLowerCase());

    return question.correct_answer === question.shuffled_answers[answerIndex];
  }

  generateQuizReport() {
    const { numOfCorrectAnswers } = this;
    const ratio = `${numOfCorrectAnswers}/5`;

    if (numOfCorrectAnswers < 2) return `‚òπÔ∏è ${ratio} Better luck next time.`;
    else if (numOfCorrectAnswers < 4) return `üòê ${ratio} Could be better.`;
    else {
      const randomFeedback = positiveFeedback[Math.floor(Math.random() * positiveFeedback.length)];
      return `üòÄ ${ratio} ${randomFeedback}`;
    }
  }

  handleUserResponse(answer) {
    const messages = [];

    if (!this.quizStarted) {
      this.quizStarted = answer.toLowerCase() === 'go';

      if (!this.quizStarted) return 'We can "Go" whenever you are ready üòâ';
      return this.askNextQuestion();
    }

    const isValidAnswer = alphabet.indexOf(answer.toLowerCase()) !== -1;
    if (!isValidAnswer) return 'üôÉ Invalid answer';

    if (this.isAnswerCorrect(answer)) {
      this.numOfCorrectAnswers++;
      messages.push('‚úîÔ∏è');
    } else {
      messages.push('‚ùå');
    }

    if (this.currentQuestionIndex > 4) {
      this.state = 'gameover';
      messages.push(this.generateQuizReport());
    } else {
      messages.push(this.askNextQuestion());
    }

    return messages;
  }
}

module.exports = Trivia;
